{"version":3,"sources":["components/PageHeader/index.js","components/PageHeader/PageHeader.js","sockets.js","content/RoomPage/index.js","content/RoomPage/RoomPage.js","content/Dashboard/Dashboard.js","content/Dashboard/index.js","content/Dashboard/Rectangle.js","content/Dashboard/DashboardDev.js","content/Stats/Stats.js","content/Stats/hooks/useColumns.js","content/Stats/hooks/useRows.js","App.js","reportWebVitals.js","enhancers/monitorReducer.js","middleware/logger.js","reducers/counterReducer.js","store.js","index.js"],"names":["PageHeader","HeaderContainer","render","isSideNavExpanded","onClickSideNavExpand","Header","SkipToContent","HeaderMenuButton","onClick","isActive","HeaderName","element","Link","to","prefix","HeaderNavigation","HeaderMenuItem","SideNav","expanded","isPersistent","SideNavItems","HeaderSideNavItems","HeaderGlobalBar","HeaderGlobalAction","RobotSocket","WebSocket","onmessage","event","data","JSON","parse","console","log","UISocket","RoomPage","React","useState","roomNumber","setRoomNumber","isModalOpen","setIsModalOpen","sendHelllo","from","type","message","send","stringify","className","style","display","flexDirection","justifyContent","alignItems","Button","margin","Modal","open","onRequestClose","modalHeading","primaryButtonText","src","alt","Tile","halls","Dashboard","stageRef","useRef","rectRef","hall","setHall","hallsId","i","length","undefined","current","opacity","push","useEffect","anim","Konva","Animation","frame","Math","sin","time","getLayer","start","stop","width","stage","stageWidth","height","stageHeight","ref","layers","map","layer","index","hallId","elements","inPath","find","el","attrs","id","splice","fill","Rectangle","shapeProps","isSelected","onSelect","onChange","shapeRef","trRef","nodes","batchDraw","Fragment","onTap","draggable","onDragEnd","e","x","target","y","onTransformEnd","node","scaleX","scaleY","max","boundBoxFunc","oldBox","newBox","defaultTextProps","text","fontSize","defaultRoomProps","defaultHallProps","defaultStickerProps","DashboardDev","shapes","setShapes","selectedShape","selectShape","newTextData","setNewTextData","stickerColor","setStickerColor","hallOrientation","setHallOrientation","exportCanvasToJSON","children","filter","object","name","dataStr","encodeURIComponent","link","document","createElement","download","href","body","appendChild","click","removeChild","downloadJSON","appendShape","newRect","shape","startsWith","newText","marginTop","marginRight","Checkbox","labelText","checked","TextInput","placeholder","value","slice","border","newShape","s","colors","next","indexOf","Stats","columns","useMemo","accessor","robot","destino","salida","llegada","table","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","App","Content","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","monitorReducerEnhancer","createStore","reducer","initialState","enhancer","state","action","number","performance","now","newState","end","diff","round","logger","store","group","info","result","getState","groupEnd","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","status","reducers","increment","decrement","incrementByAmount","payload","extraReducers","builder","addCase","pending","fulfilled","actions","rootReducer","combineReducers","counter","counterReducer","preloadedState","middlewares","loggerMiddleware","thunkMiddleware","enhancers","applyMiddleware","monitorReducersEnhancer","composedEnhancers","compose","configureStore","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.7b7e4c98.chunk.js","sourcesContent":["import PageHeader from './PageHeader';\nexport default PageHeader;\n","import React from 'react';\nimport {\n  Header,\n  HeaderContainer,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuButton,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n  SideNav,\n  SideNavItems,\n  HeaderSideNavItems,\n} from 'carbon-components-react';\n\nimport {\n    AppSwitcher20,\n    Notification20,\n    UserAvatar20,\n  } from '@carbon/icons-react';\nimport { Link } from 'react-router-dom';\n\nconst PageHeader = () => (\n  <HeaderContainer\n    render={({ isSideNavExpanded, onClickSideNavExpand }) => (\n      <Header aria-label=\"guiaMe\">\n        <SkipToContent />\n        <HeaderMenuButton\n          aria-label=\"Open menu\"\n          onClick={onClickSideNavExpand}\n          isActive={isSideNavExpanded}\n        />\n        <HeaderName element={Link} to=\"/\" prefix=\"AGR\">\n          guiaMe\n        </HeaderName>\n        <HeaderNavigation aria-label=\"guiaMe\">\n          <HeaderMenuItem element={Link} to=\"/room\">Room Page</HeaderMenuItem>\n          <HeaderMenuItem element={Link} to=\"/mapdev\">Map Editor</HeaderMenuItem>\n          <HeaderMenuItem element={Link} to=\"/stats\">Estadísticas</HeaderMenuItem>\n        </HeaderNavigation>\n        <SideNav\n          aria-label=\"Side navigation\"\n          expanded={isSideNavExpanded}\n          isPersistent={false}>\n          <SideNavItems>\n            <HeaderSideNavItems>\n                <HeaderMenuItem element={Link} to=\"/room\">\n                    Room Page\n                </HeaderMenuItem>\n                <HeaderMenuItem element={Link} to=\"/mapdev\">\n                    Map Editor\n                </HeaderMenuItem>\n                <HeaderMenuItem element={Link} to=\"/stats\">\n                    Estadísticas\n                </HeaderMenuItem>\n            </HeaderSideNavItems>\n          </SideNavItems>\n        </SideNav>\n        <HeaderGlobalBar>\n            <HeaderGlobalAction aria-label=\"Notifications\">\n                <Notification20 />\n            </HeaderGlobalAction>\n            <HeaderGlobalAction aria-label=\"User Avatar\">\n                <UserAvatar20 />\n            </HeaderGlobalAction>\n            <HeaderGlobalAction aria-label=\"App Switcher\">\n                <AppSwitcher20 />\n            </HeaderGlobalAction>\n        </HeaderGlobalBar>\n      </Header>\n    )}\n  />\n);\n\nexport default PageHeader;\n","const RobotSocket = new WebSocket('ws://localhost:8000/ws/robot/R01/');\nRobotSocket.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  console.log(\"RobotSocket Received: \", data);\n};\n\nconst UISocket = new WebSocket('ws://localhost:8000/ws/ui/R01/');\nUISocket.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  console.log(\"UISocket Received: \", data);\n};\n\n\nexport { UISocket, RobotSocket };","import RoomPage from './RoomPage';\nexport default RoomPage;\n","import React from 'react';\n\nimport { RobotSocket, UISocket } from '../../sockets';\nimport { Button, Tile, Modal } from 'carbon-components-react';\n\nconst RoomPage = () => {\n  const [roomNumber, setRoomNumber] = React.useState('');\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n\n  const sendHelllo = (from) => {\n    const data = {\n      type: from === 'UI' ? 'to.robot' : 'to.ui',\n      message: \"Hello from \" + from,\n    };\n\n    if (from === \"UI\") {\n      UISocket.send(JSON.stringify(data));\n    } else {\n      RobotSocket.send(JSON.stringify(data));\n    }\n  };\n\n  return(\n    <div className=\"room-page\">\n      <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", alignItems: \"center\"}}>\n        <Button style={{margin: \"0.1rem\"}} onClick={() => sendHelllo(\"UI\")}> Client Message </Button>\n        <Button style={{margin: \"0.1rem\"}} onClick={() => sendHelllo(\"Robot\")}> Robot Message </Button>    \n      </div>\n\n      {isModalOpen && (\n        <Modal\n          open={isModalOpen}\n          onRequestClose={() => setIsModalOpen(false)}\n          modalHeading=\"Confirmar destino\"\n          primaryButtonText=\"Submit\"\n        >\n          <div> \n            <h1>Ir a la habitación {roomNumber}?</h1>\n            <img src=\"https://i.etsystatic.com/17441626/r/il/362050/1469060776/il_fullxfull.1469060776_e867.jpg\" alt='room'/>\n          </div>\n        </Modal>\n      )}\n\n      <Tile className=\"room-page__content\">\n        {roomNumber === \"\" ? <h3>Introduce el número de habitación</h3> : <h3>Habitación: {roomNumber}</h3>}        \n        {/* <TextInput id=\"room-number\" type=\"text\" value={roomNumber} placeholder=\"Nº de habitación\" disabled/> */}\n\n        <div className=\"room-page__keyboard\">\n          <div className=\"room-page__keyboard-row\">\n            <Button className=\"room-page__keyboard-button\" onClick={() => setRoomNumber(roomNumber + \"1\")}>1</Button>\n            <Button className=\"room-page__keyboard-button\" onClick={() => setRoomNumber(roomNumber + \"2\")}>2</Button>\n            <Button className=\"room-page__keyboard-button\" onClick={() => setRoomNumber(roomNumber + \"3\")}>3</Button>\n          </div>\n          <div className=\"room-page__keyboard-row\">\n            <Button className=\"room-page__keyboard-button\" onClick={() => setRoomNumber(roomNumber + \"4\")}>4</Button>\n            <Button className=\"room-page__keyboard-button\" onClick={() => setRoomNumber(roomNumber + \"5\")}>5</Button>\n            <Button className=\"room-page__keyboard-button\" onClick={() => setRoomNumber(roomNumber + \"6\")}>6</Button>\n          </div>\n          <div className=\"room-page__keyboard-row\">\n            <Button className=\"room-page__keyboard-button\" onClick={() => setRoomNumber(roomNumber + \"7\")}>7</Button>\n            <Button className=\"room-page__keyboard-button\" onClick={() => setRoomNumber(roomNumber + \"8\")}>8</Button>\n            <Button className=\"room-page__keyboard-button\" onClick={() => setRoomNumber(roomNumber + \"9\")}>9</Button>\n          </div>\n          <div className=\"room-page__keyboard-row\">\n            <Button className=\"room-page__keyboard-button\" onClick={() => setRoomNumber(\"\")}>Reset</Button>\n            <Button className=\"room-page__keyboard-button\" onClick={() => setRoomNumber(roomNumber + \"0\")}>0</Button>\n            <Button className=\"room-page__keyboard-button\" onClick={() => setIsModalOpen(true)}>OK</Button>\n          </div>\n        </div>\n      </Tile>\n    </div>\n  )\n};\n\nexport default RoomPage;\n","import React from 'react';\nimport Konva from 'konva';\nimport stage from './stage.json';\nimport { Stage, Layer, Rect, Text } from 'react-konva';\nimport {UISocket } from '../../sockets';\n\nlet halls=[];\n\nconst Dashboard = () => {\n  const stageRef = React.useRef(null);\n  const rectRef = React.useRef(null);\n  const [hall, setHall]=React.useState(0);\n  var hallsId=[];\n  for (let i = 0; i < halls.length; i++) {\n    hallsId[i]=\"hall\"+halls[i];\n  }\n\n  UISocket.onmessage = (event) => {\n    const data = JSON.parse(event.data);\n    console.log(\"UISocket Received: \", data);\n    if(data.hall!==undefined){\n      rectRef.current.opacity(1);\n      setHall(data.hall);\n      halls.push(data.hall);\n    }\n  };\n\n  \n\n\n\n  React.useEffect(() => {\n    console.log(rectRef);\n    if (rectRef.current !== null) {\n      var period = 300;\n  \n      const anim = new Konva.Animation(frame => {\n        if (rectRef.current !== null) {\n          rectRef.current.opacity((Math.sin(frame.time / period) + 1) / 2);\n        }\n          \n      }, rectRef.current.getLayer());\n  \n      anim.start();\n      return () => {\n        anim.stop();        \n      }; \n    }\n  }, []);\n  \n  return (\n    <Stage width={stage.stageWidth} height={stage.stageHeight} ref={stageRef}>\n      {stage.layers.map((layer, index) => {\n        const hallId = \"hall\" + hall;\n        return (\n          <Layer key={index}>\n            {layer.elements.map((element, index) => {\n              if (element.type === \"Rect\") { \n                let inPath = false;\n                inPath = hallsId.find((el)=>element.attrs.id===el) ? true : false;\n                inPath = inPath ? true : element.attrs.id===hallId;\n                if (element.attrs.id===\"hall0\") inPath=false;  //Si es el HALL inicial lo dejamos en cian\n                if (hallId===\"hall0\" && halls.length!==0) {\n                  halls.splice(0,halls.length);\n                  hallsId.splice(0,hallsId.length); //Al volver al HALL (id=\"hall0\") vaciamos array de halls -> \"reiniciamos\"\n                  }  \n                return <Rect key={index} {...element.attrs} fill={inPath === true ? \"green\" :element.attrs.fill} ref={element.attrs.id === hallId ? rectRef : null} />; \n              } else if (element.type === \"Text\") {\n                return <Text key={index} {...element.attrs} />\n              }\n\n              return null;\n            })}\n          </Layer>\n        );\n      }\n      )}\n    </Stage>\n  );\n};\n\nexport default Dashboard;","import Dashboard from \"./Dashboard\";\nexport default Dashboard;","import React from 'react';\nimport { Rect, Transformer } from 'react-konva';\n\nconst Rectangle = ({ shapeProps, isSelected, onSelect, onChange }) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <Rect\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x() > 0 ? e.target.x() : 0,\n            y: e.target.y() > 0 ? e.target.y() : 0,\n          });\n        }}\n        onTransformEnd={(e) => {\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY),\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Rectangle;","import React from 'react';\nimport './dashboard.scss';\n\nimport { Button, Checkbox, TextInput } from 'carbon-components-react';\n\nimport { Stage, Layer, Text } from 'react-konva';\nimport Rectangle from './Rectangle';\n\n\nconst defaultTextProps = {\n  type: \"Text\",\n  x: 100,\n  y: 100,\n  text: 'Hello World',\n  fontSize: 16,\n  fill: \"black\",\n};\n\nconst defaultRoomProps = {\n  type: \"Rect\",\n  x: 100,\n  y: 100,\n  width: 100,\n  height: 100,\n  fill: 'purple',\n};\n\nconst defaultHallProps = {\n  type: \"Rect\",\n  x: 100,\n  y: 100,\n  width: 30,\n  height: 100,\n  fill: 'black',\n};\n\nconst defaultStickerProps = {\n  type: \"Rect\",\n  x: 100,\n  y: 100,\n  width: 30,\n  height: 30,\n  fill: 'blue',\n};\n\nconst DashboardDev = () => {\n  // Stage refence to export map to JSON\n  const stageRef = React.useRef();\n\n  // List of shapes in the stage and selected shape id\n  const [shapes, setShapes] = React.useState([]);\n  const [selectedShape, selectShape] = React.useState();\n  const [newTextData, setNewTextData] = React.useState('');\n  const [stickerColor, setStickerColor] = React.useState('blue');\n  const [hallOrientation, setHallOrientation] = React.useState('vertical');\n\n  function downloadJSON(object, name) {\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(object, null, 2));\n    var link = document.createElement('a');\n    link.download = name;\n    link.href = dataStr;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  const exportCanvasToJSON = () => {\n    const stage = stageRef.current;\n    const stageLayers = stage.children;\n\n    // For each layer we are going to save the attrs of its childrens\n    const layers = stageLayers.map((layer, index) => {\n      const layerElements = layer.children;\n      const layerElementsAttrs = layerElements.filter(element => element.className !== \"Transformer\").map(element => {\n        if (element.className === \"Rect\") {\n          return {\n            type: element.className,\n            attrs: {\n              id: element.id(),\n              x: element.x(),\n              y: element.y(),\n              width: element.width(),\n              height: element.height(),\n              fill: element.fill(),\n            }\n          }\n        } else if (element.className === \"Text\") {\n          return {\n            type: element.className,\n            attrs: {\n              id: element.id(),\n              x: element.x(),\n              y: element.y(),\n              text: element.text(),\n              fontSize: element.fontSize(),\n              fill: element.fill(),\n            }\n          }\n        }\n        return null;\n      });\n\n      return {\n        layer: \"layer\" + index,\n        elements: layerElementsAttrs\n      }\n    });\n\n    const exportedStage = {\n      stageWidth: stage.width(),\n      stageHeight: stage.height(),\n      layers: layers,\n    }\n\n    downloadJSON(exportedStage, \"stage.json\");\n  };\n\n  function appendShape(type) {\n    if (type === 'room') {\n      const newRect = {\n        id: \"room\" + shapes.filter(shape => shape.id.startsWith('room')).length,\n        ...defaultRoomProps,\n      };\n\n      setShapes([...shapes, newRect]);\n    } else if (type === 'text') {\n      const newText = {\n        id: \"text\" + shapes.filter(shape => shape.id.startsWith('text')).length,\n        ...defaultTextProps,\n      };\n\n      if (newTextData !== '') {\n        newText.text = newTextData;\n        setNewTextData('');\n      }\n\n      setShapes([...shapes, newText]);\n    } else if (type === 'hall') {\n      const newRect = {\n        id: \"hall\" + shapes.filter(shape => shape.id.startsWith('hall')).length,\n        ...defaultHallProps,\n      };\n      if (hallOrientation === 'vertical') {\n        // Default vertical hall\n      } else {\n        // Default horizontal hall\n        const width = newRect.width;\n        newRect.width = newRect.height;\n        newRect.height = width;\n      }\n\n      setShapes([...shapes, newRect]);\n    } else if (type === 'sticker') {\n      const newRect = {\n        id: \"sticker\" + shapes.filter(shape => shape.id.startsWith('sticker')).length,\n        ...defaultStickerProps,\n      };\n      newRect.fill = stickerColor;\n\n      setShapes([...shapes, newRect]);\n    }\n  }\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"row\", marginTop: \"1rem\" }}>\n      <div style={{ display: \"flex\", flexDirection: \"column\", marginRight: \"1rem\" }}>\n        <Button onClick={() => appendShape(\"room\")} style={{margin: \"1px\"}}>New Room</Button>\n        <Button onClick={() => appendShape(\"hall\")} style={{margin: \"1px\"}}>New Hall</Button>\n        <div>\n          <Checkbox id=\"cb-vertical\" labelText=\"Vertical\" onChange={() => setHallOrientation(\"vertical\")} checked={hallOrientation === \"vertical\"} />\n          <Checkbox id=\"cb-horizontal\" labelText=\"Horizontal\" onChange={() => setHallOrientation(\"horizontal\")} checked={hallOrientation === \"horizontal\"} />\n        </div>\n        <Button onClick={() => appendShape(\"sticker\")} style={{margin: \"1px\"}}>New Sticker</Button>\n        <div>\n          <Checkbox id=\"cb-blue\" labelText=\"Blue\" onClick={() => setStickerColor(\"blue\")} checked={stickerColor === \"blue\"} />\n          <Checkbox id=\"cb-red\" labelText=\"Red\" onClick={() => setStickerColor(\"red\")} checked={stickerColor === \"red\"} />\n        </div>\n        <Button onClick={() => appendShape(\"text\")} style={{margin: \"1px\"}}>New Text</Button>\n        <div>\n          <TextInput id=\"text-input\" labelText=\"\" placeholder=\"Hello World\" onChange={(e) => setNewTextData(e.target.value)} value={newTextData}/>\n        </div>\n        <Button onClick={() => setShapes(shapes.slice(0, shapes.length-1))} style={{margin: \"1px\"}}>Del Last</Button>\n        <Button onClick={() => exportCanvasToJSON()} style={{margin: \"1px\"}}>Export</Button>\n        {stageRef.current &&\n          <>\n            <div>Stage width: {stageRef.current.width()}</div>\n            <div>Stage height: {stageRef.current.height()}</div>\n          </>\n        }\n      </div>\n\n      <div style={{ border: \"1px solid\" }}>\n        <Stage width={1280} height={720} ref={stageRef}>\n          <Layer>\n            {shapes.map((shape, index) => {\n              const isSelected = selectedShape === shape.id;\n              if (shape.type === \"Rect\") {\n                return (\n                  <Rectangle\n                    key={shape.id}\n                    shapeProps={shape}\n                    onSelect={() => {\n                      if (selectedShape === shape.id) {\n                        selectShape(null);\n                      } else {\n                        selectShape(shape.id);\n                      }\n                    }}\n                    onChange={(newShape) => {\n                      setShapes(shapes.map((s) => (s.id === shape.id ? newShape : s)));\n                    }}\n                    isSelected={isSelected}\n                  />\n                );\n              }\n              return null;\n            })}\n          </Layer>\n\n          <Layer>\n            {shapes.map((shape, index) => {\n              const isSelected = selectedShape === shape.id;\n              if (shape.type === \"Text\") {\n                return (\n                  <Text\n                    key={shape.id}\n                    draggable\n                    {...shape}\n                    isSelected={isSelected}\n                    onClick={() => {\n                      if (selectedShape === shape.id) {\n                        // Change color of the selected shape\n                        const colors = ['red', 'black', 'white'];\n                        const current = colors.indexOf(shape.fill);\n                        const next = (current + 1) % colors.length;\n                        shape.fill = colors[next];\n                        selectShape(null);\n                      } else {\n                        selectShape(shape.id);\n                      }\n                    }}\n                  />\n                );\n              }\n              return null;\n            })}\n          </Layer>\n        </Stage>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardDev;","import { useTable, useSortBy } from \"react-table\";\nimport useRows from \"./hooks/useRows\";\nimport useColumns from \"./hooks/useColumns\";\n\nimport \"./styles.css\";\n\nexport default function Stats() {\n  const columns = useColumns();\n  const data = useRows();\n  const table = useTable({ columns, data }, useSortBy);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = table;\n\n  return (\n    <div className=\"container\">\n      {/* Aplicamos las propiedades de la tanña */}\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                // Aplicamos las propiedades de ordenación a cada columna\n                <th\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  className={\n                    column.isSorted\n                      ? column.isSortedDesc\n                        ? \"desc\"\n                        : \"asc\"\n                      : \"\"\n                  }\n                >\n                  {column.render(\"Header\")}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        {/* Aplicamos las propiedades de la tabla */}\n        <tbody {...getTableBodyProps()}>\n          {\n            // Bucle sobre las filas\n            rows.map((row) => {\n              // Prepara la fila para mostrar\n              prepareRow(row);\n              return (\n                // Aplicamos las propiedades de las columnas\n                <tr {...row.getRowProps()}>\n                  {\n                    // Bucle sobre las celdas\n                    row.cells.map((cell) => {\n                      // Aplicamos las propiedades de las celdas\n                      return (\n                        <td {...cell.getCellProps()}>\n                          {\n                            cell.render(\"Cell\")\n                          }\n                        </td>\n                      );\n                    })\n                  }\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import { useMemo } from \"react\";\n\nexport default function useColumns() {\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"ROBOT\",\n        accessor: \"robot\"\n      },\n      {\n        Header: \"DESTINO\",\n        accessor: \"destino\"\n      },\n      {\n        Header: \"HORA SALIDA\",\n        accessor: \"salida\"\n      },\n      {\n        Header: \"HORA LLEGADA\",\n        accessor: \"llegada\"\n      }\n    ],\n    []\n  );\n\n  return columns;\n}","import { useMemo } from \"react\";\n\nexport default function useRows() {\n  const rows = useMemo(\n    () => [\n      {\n        robot: \"Picar-S\",\n        destino: \"Room 2\",\n        salida: \"12/03/2021 12:05:48\",\n        llegada: \"12/03/2021 12:07:36\"\n      },\n      {\n        robot: \"Picar-S\",\n        destino: \"Room 7\",\n        salida: \"10/03/2021 14:36:12\",\n        llegada: \"10/03/2021 14:38:43\"\n      },\n      {\n        robot: \"Picar-S\",\n        destino: \"Room 4\",\n        salida: \"11/03/2021 11:23:33\",\n        llegada: \"11/03/2021 11:26:54\"\n      },\n      {\n        robot: \"Picar-S\",\n        destino: \"Room 1\",\n        salida: \"11/03/2021 11:33:33\",\n        llegada: \"11/03/2021 11:35:54\"\n      }\n    ],\n    []\n  );\n\n  return rows;\n}\n","// import logo from './logo.svg';\nimport React from 'react';\n\nimport './App.scss';\nimport PageHeader from './components/PageHeader';\n\nimport { Route, Switch } from 'react-router-dom';\nimport { Content } from 'carbon-components-react';\n\nimport RoomPage from './content/RoomPage';\n\nimport Dashboard from './content/Dashboard';\nimport DashboardDev from './content/Dashboard/DashboardDev';\nimport Stats from './content/Stats/Stats';\n\nfunction App() {\n  return (\n    <>\n      <PageHeader/>\n      <Content>\n        <div className=\"room-page__header\">\n          <h1>GuiaMe: Automated Guiding Robot</h1>\n          <p>Un guía de confianza para gente de todo tipo</p>\n        </div>\n        <Switch>\n          <Route exact path=\"/\" component={Dashboard} />\n          <Route exact path=\"/mapdev\" component={DashboardDev} />\n          <Route exact path=\"/room\" component={RoomPage} />\n          <Route exact path=\"/stats\" component={Stats} />\n        </Switch>\n      </Content>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const round = number => Math.round(number * 100) / 100\n\nconst monitorReducerEnhancer =\n  createStore => (reducer, initialState, enhancer) => {\n    const monitoredReducer = (state, action) => {\n      const start = performance.now()\n      const newState = reducer(state, action)\n      const end = performance.now()\n      const diff = round(end - start)\n\n      console.log('Reducer process time:', diff)\n\n      return newState\n    }\n\n    return createStore(monitoredReducer, initialState, enhancer)\n  }\n\nexport default monitorReducerEnhancer","const logger = store => next => action => {\n    console.group(action.type)\n    console.info('Dispatching', action)\n    let result = next(action)\n    console.log('Next state', store.getState())\n    console.groupEnd()\n    return result\n  }\n  \n  export default logger","// Create a \"reducer\" function that determines what the new state\n// should be when something happens in the app\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\nfunction fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;","import { applyMiddleware, compose, createStore, combineReducers } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\nimport monitorReducersEnhancer from './enhancers/monitorReducer'\nimport loggerMiddleware from './middleware/logger'\n\nimport counterReducer from './reducers/counterReducer'\n\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n})\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [loggerMiddleware, thunkMiddleware]\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const enhancers = [middlewareEnhancer, monitorReducersEnhancer]\n\n  let composedEnhancers = null\n  if (process.env.NODE_ENV === 'development') {\n    composedEnhancers = composeWithDevTools(...enhancers)\n  } else {\n    composedEnhancers = compose(...enhancers)\n  }\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers)\n  \n  if (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept(rootReducer, () => store.replaceReducer(rootReducer))\n  }\n\n  return store\n}","import App from './App';\nimport './index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux'\nimport reportWebVitals from './reportWebVitals';\nimport configureStore from './store'\n\nconst store = configureStore()\n\nconst renderApp = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>,\n    document.getElementById('root')\n  )\n  \n  if (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept('./App', renderApp)\n  }\n}\n\nrenderApp();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}